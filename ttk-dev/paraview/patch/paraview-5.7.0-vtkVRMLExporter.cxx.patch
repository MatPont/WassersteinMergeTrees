diff --git a/IO/Export/vtkVRMLExporter.cxx b/IO/Export/vtkVRMLExporter.cxx
index 27de079ba7..aa950f2450 100644
--- a/IO/Export/vtkVRMLExporter.cxx
+++ b/IO/Export/vtkVRMLExporter.cxx
@@ -45,6 +45,8 @@ namespace {
 
 vtkStandardNewMacro(vtkVRMLExporter);
 
+vtkPolyData *exportPolyData_ = NULL;
+
 vtkVRMLExporter::vtkVRMLExporter()
 {
   this->Speed = 4.0;
@@ -73,8 +75,8 @@ void vtkVRMLExporter::WriteData()
   vtkActor *anActor, *aPart;
   vtkLightCollection *lc;
   vtkLight *aLight;
-  vtkCamera *cam;
-  double *tempd;
+//  vtkCamera *cam;
+//  double *tempd;
   FILE *fp;
 
   // make sure the user specified a FileName or FilePointer
@@ -129,32 +131,34 @@ void vtkVRMLExporter::WriteData()
   fprintf(fp,"    }\n ");
   // End of Background
 
-  // do the camera
-  cam = ren->GetActiveCamera();
-  fprintf(fp,"    Viewpoint\n      {\n      fieldOfView %f\n",
-          cam->GetViewAngle()*vtkMath::Pi()/180.0);
-  fprintf(fp,"      position %f %f %f\n",cam->GetPosition()[0],
-          cam->GetPosition()[1], cam->GetPosition()[2]);
-  fprintf(fp,"      description \"Default View\"\n");
-  tempd = cam->GetOrientationWXYZ();
-  fprintf(fp,"      orientation %.*g %.*g %.*g %.*g\n      }\n",
-    max_double_digits, tempd[1],
-    max_double_digits, tempd[2],
-    max_double_digits, tempd[3],
-    max_double_digits, tempd[0]*vtkMath::Pi()/180.0);
-
-  // do the lights first the ambient then the others
-  fprintf(fp,
-    "    NavigationInfo {\n      type [\"EXAMINE\",\"FLY\"]\n      speed %f\n",
-          this->Speed);
-  if (ren->GetLights()->GetNumberOfItems() == 0)
-  {
-    fprintf(fp,"      headlight TRUE}\n\n");
-  }
-  else
-  {
-    fprintf(fp,"      headlight FALSE}\n\n");
-  }
+  // Bug fix made by TTK
+  // // do the camera
+  // cam = ren->GetActiveCamera();
+  // fprintf(fp,"    Viewpoint\n      {\n      fieldOfView %f\n",
+  //         cam->GetViewAngle()*vtkMath::Pi()/180.0);
+  // fprintf(fp,"      position %f %f %f\n",cam->GetPosition()[0],
+  //         cam->GetPosition()[1], cam->GetPosition()[2]);
+  // fprintf(fp,"      description \"Default View\"\n");
+  // tempd = cam->GetOrientationWXYZ();
+  // fprintf(fp,"      orientation %.*g %.*g %.*g %.*g\n      }\n",
+  //   max_double_digits, tempd[1],
+  //   max_double_digits, tempd[2],
+  //   max_double_digits, tempd[3],
+  //   max_double_digits, tempd[0]*vtkMath::Pi()/180.0);
+
+  // // do the lights first the ambient then the others
+  // fprintf(fp,
+  //   "    NavigationInfo {\n      type [\"EXAMINE\",\"FLY\"]\n      speed %f\n",
+  //         this->Speed);
+  // if (ren->GetLights()->GetNumberOfItems() == 0)
+  // {
+  //   fprintf(fp,"      headlight TRUE}\n\n");
+  // }
+  // else
+  // {
+  //   fprintf(fp,"      headlight FALSE}\n\n");
+  // }
+  // End of Bug fix
   fprintf(fp,
     "    DirectionalLight { ambientIntensity 1 intensity 0 # ambient light\n");
   fprintf(fp,"      color %f %f %f }\n\n", ren->GetAmbient()[0],
@@ -239,6 +243,9 @@ void vtkVRMLExporter::WriteALight(vtkLight *aLight, FILE *fp)
 
 void vtkVRMLExporter::WriteAnActor(vtkActor *anActor, FILE *fp)
 {
+
+  printf("[vtkVRMLExporter] Using TTK fix for VRML export...\n");
+
   vtkSmartPointer<vtkPolyData> pd;
   vtkPointData *pntData;
   vtkPoints *points;
@@ -328,6 +335,10 @@ void vtkVRMLExporter::WriteAnActor(vtkActor *anActor, FILE *fp)
   fprintf(fp,"      children [\n");
   trans->Delete();
 
+  // BUG fix
+  exportPolyData_ = static_cast<vtkPolyData *>(pd);
+  // end of BUG fix
+
   pm = vtkPolyDataMapper::New();
   pm->SetInputData(pd);
   pm->SetScalarRange(anActor->GetMapper()->GetScalarRange());
@@ -755,6 +766,23 @@ void vtkVRMLExporter::WritePointData(vtkPoints *points, vtkDataArray *normals,
     fprintf(fp,"          }\n");
   }
 
+  // BUG fix here.
+  if(exportPolyData_){
+    fprintf(fp,"          texCoordIndex[\n");
+    vtkCellArray *cells = exportPolyData_->GetPolys();
+    vtkIdType npts = 0;
+    vtkIdType *indx = NULL;
+    for(cells->InitTraversal(); cells->GetNextCell(npts, indx);){
+      fprintf(fp,"            ");
+      for(int i = 0; i < npts; i++){
+        fprintf(fp, "%i, ", static_cast<int>(indx[i]));
+      }
+      fprintf(fp, "-1,\n");
+    }
+    fprintf(fp,"          ]\n");
+  }
+  // end of BUG fix here.
+
   // write out the point data
   if (colors)
   {
